<? 
   //*** Sample OnePager app for MacHTTP-js -- dragdrop.jhtml ***
   //*** Illustrates how to get the full path of a file dropped in a MacHTTP-js window
   // Author: cshotton
   //
   var res = "";							
   var port = args.req.app.get("port");		
   
   var q = args.req.query.url;				//see if a parameter called "url" was passed in the query string

   if (q !== null && q !== undefined) {
   		console.log ("Opening URL " + q);	//scripts can output messages to the MacHTTP-js console display
		context.verbs.openURL (q); 			//open the URL in the external browser (context is a special global provided by MacHTTP-js)
		args.skipHTML = true;				//tell MacHTTP-js to skip sending HTML to the browser until skipHTML becomes false
   }
   else {  //see if "?console=1" is part of the URL. If so, we're supposed to be opening in a native window
		var cons = args.req.query.console;
		var vprocess = args.req.query.process;
		
		//request to run in a console window (native MacHTTP-js window)
		if (cons !== null && cons !== undefined) {
			res="";
			args.skipHTML = false; //time to turn on HTML output so the HTML below is returned
		}
		// this is where we would process the dropped file on the server
		else if (vprocess !== null && vprocess !== undefined) { //pretend to process the file on the server
			//do some file processing here with the dropped file name
			console.log ("Processing file " + decodeURI(vprocess));
			args.res.status (200);
			args.res.setHeader ("Content-Type", "application/json");
			args.res.end (results = JSON.stringify ({"msg":"all done", "err":200}));
		}
		//this is where we end up when launching the demo file from a normal browser
		else {
			// there were no search args, so just launch the app in a native window and return a brief message
			console.log ("Launching Drag-Drop Demo...");
			var path = args.req.baseUrl.slice (0, args.req.baseUrl.lastIndexOf ("/"));
			//open the news console in a new native window associated with MacHTTP-js
			var win = context.verbs.createWindow ("my.dragdrop", "http://localhost:" + port + path + "/dragdrop.jhtml?console=1", 
				{width:400, height:400});
			
			//return a little status info to the browser that the app is running and make sure the remaining HTML skipped
			res="<html><body><h2>Starting your drag-n-drop demo... </h2>Check MacHTTP-js for the demo window.<p />You can close this window now.</body></html>";
			args.skipHTML = true;

		}
   }
   res; //return appropriate results generated by the CGI code (or "" if nothing is to be returned).
?>
<html>
<head>
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<title>Drag-n-Drop Demo</title>
	<script>
		try {
			//this code sets up a reasonable facsimile of a browser runtime in MacHTTP-js windows
			window.nodeRequire = require;
			delete window.require;
			delete window.exports;
			delete window.module;
		}
		catch (e) {
			console.log ("skipping electron inits");
		}
	</script>
	
	<!-- MacHTTP-js includes bootstrap, jquery, fontawesome, and a few other goodies in the /_static/lib
	     branch of its internal document tree. They can be used in your OnePagers or you can pull in
	     resources from an external server or CDN as appropriate.
	-->
	<script src="/_static/lib/jquery/dist/jquery.js"></script>
	<link rel="stylesheet" href="/_static/lib/fontawesome/css/font-awesome.min.css">
	<script src="/_static/lib/jquery/dist/jquery.js"></script>
	
	<!-- Use the app-wide theme from MacHTTP-js by getting the theme setting out of the ODB -->
	<!-- Note the code inside of "angle/question" brackets that is run on the server side to insert the style sheet name. --> 
	<link rel="stylesheet" href="<%
									var css="";
										var theme = context.odb.getAttribute ("system/settings/globalTheme");
										css = context.odb.getAttribute ("system/themes/" + theme);
									args.skipHTML ? "" : css;
								%>">
	<script src="/_static/lib/bootstrap/dist/js/bootstrap.min.js"></script>

</head>
<body>
	<div class="container-fluid filled">
		<div class="row">
			<div class="col-md-12 col-xs-12">
				<h3>Drag and drop a file in this window!</h3>
			</div>
		</div>
		<div class="row">
			<div class="col-md-2 col-xs-3">
				<b>Dropped:</b>
			</div>
			<div class="col-md-10 col-xs-9" id="path">
				Nothing dropped yet.
			</div>
		</div>
		<div class="row">
			<div class="col-md-12 col-xs-12 center-block">
				<svg width="250" height="250" class="img-responsive center-block">
					<circle cx="125" cy="125" r="100" stroke="red" stroke-width="30" fill="white" />
					<circle cx="125" cy="125" r="50" stroke="red" stroke-width="30" fill="white" />
					<circle cx="125" cy="125" r="15" stroke="red" stroke-width="1" fill="red" />
				</svg?
			</div>
		</div>
	</div>
	
	<script>
	
		function msg (m) {
			console.log (m);
		}
	
		var service = "dragdrop.jhtml?process=";
	
		// send the file path to the server for processing
		function ProcessFile (path) {
			var svc = service + encodeURI (path);
			try {
				$.ajax ({
						 type: "GET",
						 url: svc,
						 dataType:'json',
						 data: null,
						 success: function (data) {
							console.log ('ProcessFile results: ' + JSON.stringify(data));	
							},
						 error: function (x,stat,err) {
						 	console.log ('ProcessFile error: ' + err);
						 	}
				});
			} catch (err) {
				msg ("ProcessFile err: " + err);
			}
		}

		// drag and drop handlers for the native window
		document.ondragover = document.ondrop = (ev) => {
			ev.preventDefault()
		}

		// make the whole body of the window live for drag and drop
		document.body.ondrop = (ev) => {
			var path = ev.dataTransfer.files[0].path; //pull out the Electron-specific path to the file
			$("#path").html (path);
			ProcessFile (path);
			ev.preventDefault();
		}

		$(document).ready (function () {

		});
	
	
	</script>

</body>
</html>